Hereâ€™s an explanation and examples of how `event.preventDefault()` works in JavaScript, both with and without it.

---

### What is `event.preventDefault()`?
- It prevents the default action of an event from being triggered.
- Default actions are browser-defined behaviors like submitting a form, following a link, etc.

---

### Example 1: **Form Submission**

#### Without `event.preventDefault()`:
The form will submit, causing the page to reload or navigate.
```html
<!DOCTYPE html>
<html>
<head>
    <title>Without preventDefault</title>
</head>
<body>
    <form id="myForm">
        <input type="text" placeholder="Enter text">
        <button type="submit">Submit</button>
    </form>
    <script>
        document.getElementById('myForm').addEventListener('submit', function (event) {
            alert('Form is submitted!');
            // No preventDefault, so the page will reload.
        });
    </script>
</body>
</html>
```

#### With `event.preventDefault()`:
The form submission will be prevented, and the page won't reload.
```html
<!DOCTYPE html>
<html>
<head>
    <title>With preventDefault</title>
</head>
<body>
    <form id="myForm">
        <input type="text" placeholder="Enter text">
        <button type="submit">Submit</button>
    </form>
    <script>
        document.getElementById('myForm').addEventListener('submit', function (event) {
            event.preventDefault();
            alert('Form submission prevented!');
        });
    </script>
</body>
</html>
```

---

### Example 2: **Anchor Tag Click**

#### Without `event.preventDefault()`:
The browser will navigate to the link's `href` value.
```html
<!DOCTYPE html>
<html>
<head>
    <title>Without preventDefault</title>
</head>
<body>
    <a href="https://example.com" id="myLink">Go to Example</a>
    <script>
        document.getElementById('myLink').addEventListener('click', function () {
            alert('Navigating to the link!');
            // No preventDefault, so the link will be followed.
        });
    </script>
</body>
</html>
```

#### With `event.preventDefault()`:
Navigation to the link will be stopped.
```html
<!DOCTYPE html>
<html>
<head>
    <title>With preventDefault</title>
</head>
<body>
    <a href="https://example.com" id="myLink">Go to Example</a>
    <script>
        document.getElementById('myLink').addEventListener('click', function (event) {
            event.preventDefault();
            alert('Link click prevented!');
        });
    </script>
</body>
</html>
```

---

### Example 3: **Checkbox Selection**

#### Without `event.preventDefault()`:
The checkbox can be toggled on and off.
```html
<!DOCTYPE html>
<html>
<head>
    <title>Without preventDefault</title>
</head>
<body>
    <input type="checkbox" id="myCheckbox">
    <label for="myCheckbox">Check me!</label>
    <script>
        document.getElementById('myCheckbox').addEventListener('click', function () {
            alert('Checkbox toggled!');
            // No preventDefault, so the checkbox state changes.
        });
    </script>
</body>
</html>
```

#### With `event.preventDefault()`:
The checkbox state won't change.
```html
<!DOCTYPE html>
<html>
<head>
    <title>With preventDefault</title>
</head>
<body>
    <input type="checkbox" id="myCheckbox">
    <label for="myCheckbox">Check me!</label>
    <script>
        document.getElementById('myCheckbox').addEventListener('click', function (event) {
            event.preventDefault();
            alert('Checkbox toggle prevented!');
        });
    </script>
</body>
</html>
```

---

### Key Points:
- Use `event.preventDefault()` when you need to stop the browser's default behavior.
- Common cases include handling custom form submissions, preventing navigation, or overriding default actions like drag-and-drop or key presses.


You can change the border color of a checkbox using CSS, but styling checkboxes directly can be tricky because they are native UI elements. The approach depends on the browser and the desired effect.

Here are a few methods:

---

### 1. **Using `appearance: none;`**
This completely removes the browser's default styling for the checkbox, allowing you to customize it.

```html
<!DOCTYPE html>
<html>
<head>
    <style>
        input[type="checkbox"] {
            appearance: none; /* Removes default style */
            width: 20px;
            height: 20px;
            border: 2px solid blue; /* Initial border color */
            border-radius: 4px; /* Optional: for rounded corners */
            outline: none;
            cursor: pointer;
        }

        input[type="checkbox"]:checked {
            border-color: green; /* Change border color when checked */
            background-color: lightgreen; /* Optional: add a background color */
        }

        input[type="checkbox"]:hover {
            border-color: red; /* Change border color on hover */
        }
    </style>
</head>
<body>
    <label>
        <input type="checkbox"> Custom Checkbox
    </label>
</body>
</html>
```

---

### 2. **Using `::before` and `::after` Pseudo-Elements**
This method allows styling around the checkbox without removing the default appearance.

```html
<!DOCTYPE html>
<html>
<head>
    <style>
        input[type="checkbox"] {
            position: relative;
            width: 20px;
            height: 20px;
            cursor: pointer;
            visibility: hidden; /* Hide the default checkbox */
        }

        input[type="checkbox"]::before {
            content: '';
            display: inline-block;
            position: absolute;
            width: 20px;
            height: 20px;
            border: 2px solid blue; /* Border color */
            border-radius: 4px; /* Optional */
            background-color: white;
        }

        input[type="checkbox"]:checked::before {
            border-color: green;
            background-color: lightgreen; /* Optional: change background when checked */
        }

        input[type="checkbox"]:hover::before {
            border-color: red; /* Hover effect */
        }
    </style>
</head>
<body>
    <label>
        <input type="checkbox"> Styled Checkbox
    </label>
</body>
</html>
```

---

### 3. **Using Wrapper Div for Custom Styling**
This is another way to create a completely custom-styled checkbox.

```html
<!DOCTYPE html>
<html>
<head>
    <style>
        .checkbox-wrapper {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid blue;
            border-radius: 4px;
            position: relative;
            cursor: pointer;
        }

        .checkbox-wrapper input[type="checkbox"] {
            position: absolute;
            opacity: 0; /* Hide the actual checkbox */
            width: 0;
            height: 0;
        }

        .checkbox-wrapper input[type="checkbox"]:checked + .custom-checkbox {
            border-color: green; /* Border color when checked */
            background-color: lightgreen;
        }

        .checkbox-wrapper:hover .custom-checkbox {
            border-color: red; /* Hover effect */
        }

        .custom-checkbox {
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
    <label class="checkbox-wrapper">
        <input type="checkbox">
        <div class="custom-checkbox"></div>
    </label>
</body>
</html>
```

---

### Notes:
- **Browser Compatibility:** The `appearance: none;` approach is supported in most modern browsers (like Chrome, Edge, and Firefox). For older browsers, a wrapper or pseudo-element approach works better.
- Custom checkboxes allow greater flexibility in styling, especially when matching a design system.